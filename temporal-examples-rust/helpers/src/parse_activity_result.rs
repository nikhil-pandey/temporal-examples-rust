//! Helper to decode an [`ActivityResolution`] into a strongly-typed value.
//!
//! This is a lightweight utility originally ported from the old `temporal-helpers`
//! crate that shipped with the community Rust samples. It inspects the
//! [`ActivityResolution`] generated by a completed Activity invocation and—in the
//! success case—deserialises the single JSON payload into the caller-provided
//! type `T`.

use log::debug;
use serde::de::DeserializeOwned;
use temporal_sdk_core_protos::coresdk::activity_result::{
    activity_resolution::Status::Completed, ActivityResolution,
};

/// Attempt to extract and deserialize the successful result value of an
/// Activity.
///
/// When the activity completed successfully (as indicated by
/// [`ActivityResolution::completed_ok`]) this helper will decode the first
/// payload into the requested type `T` using `serde_json`. If the activity did
/// not complete successfully or the payload cannot be decoded the function
/// returns an `anyhow::Error` describing the failure.
pub fn parse_activity_result<T>(resolution: &ActivityResolution) -> Result<T, anyhow::Error>
where
    T: DeserializeOwned,
{
    if resolution.completed_ok() {
        if let Some(Completed(success)) = &resolution.status {
            if let Some(payload) = &success.result {
                let value = serde_json::from_slice(payload.data.as_slice())?;
                return Ok(value);
            }
        } else {
            debug!("Activity failed with status: {:?}", resolution.status);
        }
    }

    Err(anyhow::anyhow!("Activity failed"))
}
